[{"/Users/shoaibhossain/Desktop/react-complete-giude/src/App.js":"1","/Users/shoaibhossain/Desktop/react-complete-giude/src/Person/Person.js":"2"},{"size":4341,"mtime":1610787792689,"results":"3","hashOfConfig":"4"},{"size":256,"mtime":1610782939651,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8","usedDeprecatedRules":"9"},"1v561rw",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/shoaibhossain/Desktop/react-complete-giude/src/App.js",["12"],"// import React, { Component } from \"react\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Person from \"./Person/Person\";\nimport { Button } from \"@material-ui/core\";\n// import logo from \"./logo.svg\";\n// import { Autocomplete } from \"@material-ui/lab\";\n// import TextField from '@material-ui/core/TextField';\n\n// Functional component\nconst App = (props) => {\n  const [personsState, setPersonsState] = useState({\n    persons: [\n      { name: \"Asif\", age: 26 },\n      { name: \"Max\", age: 30 },\n      { name: \"Jonas\", age: 31 },\n    ],\n\n    otherState: \"Some other value\",\n  });\n\n  console.log(personsState);\n  \n\n  const switchNameHandler = () => {\n    setPersonsState({\n      persons: [\n        { name: \"Asif Newaz\", age: 27 },\n        { name: \"Maximillian\", age: 30 },\n        { name: \"Jonas\", age: 31 },\n      ],\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Hello world!</h1>\n      <p>This is really working!</p>\n\n      <button onClick={switchNameHandler}>Switch Name</button>\n\n      <Person name={personsState.persons[0].name} age={personsState.persons[0].age}>\n        <a href=\"#\">Click Me!</a>\n      </Person>\n\n      <Person name={personsState.persons[1].name} age={personsState.persons[1].age}>\n        My Hobbies: Racing\n      </Person>\n\n      <Person name={personsState.persons[2].name} age={personsState.persons[2].age} />\n\n      <Button color=\"secondary\" disabled={false}>\n        Hello World\n      </Button>\n\n      {/* <Autocomplete\n          id=\"combo-box-demo\"\n          options={top100Films}\n          getOptionLabel={(option) => option.title}\n          style={{ width: 300 }}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Combo box\" variant=\"outlined\" />\n          )}\n        /> */}\n    </div>\n  );\n\n  // Working with props\n  /*\n  return (\n    <div className=\"App\">\n      <h1>Hello world!</h1>\n      <p>This is really working!</p>\n      <button>Switch Name</button>\n      <Person name=\"Asif\" age=\"26\">\n        <a href=\"#\">Click Me!</a>\n      </Person>\n      <Person name=\"Max\" age=\"30\">\n        My Hobbies: Racing\n      </Person>\n      <Person name=\"Jonas\" age=\"31\" />\n    </div>\n  );\n  */\n\n  // How JSX actually works\n  /*\n    return React.createElement(\n      \"div\",\n      {className: App},\n      React.createElement(\"h1\", null, \"Hi, I'm a React App\")\n    );\n    */\n};\n\nexport default App;\n\n// Class based component\n/*\nclass App extends Component {\n  state = {\n    persons: [\n      { name: \"Asif\", age: 26 },\n      { name: \"Max\", age: 30 },\n      { name: \"Jonas\", age: 31 },\n    ],\n\n    otherState: \"Some other value\",\n  };\n\n  switchNameHandler = () => {\n    console.log(\"was clicked!\");\n    //DON'T DO THIS: this.state.persons[1].name = \"Asif Newaz\";\n    this.setState({\n      persons: [\n        { name: \"Asif Newaz\", age: 27 },\n        { name: \"Max\", age: 30 },\n        { name: \"Jonas\", age: 31 },\n      ],\n    });\n  };\n\n  //Working with state\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Hello world!</h1>\n        <p>This is really working!</p>\n        <button onClick={this.switchNameHandler}>Switch Name</button>\n        <Person\n          name={this.state.persons[0].name}\n          age={this.state.persons[0].age}\n        >\n          <a href=\"#\">Click Me!</a>\n        </Person>\n        <Person\n          name={this.state.persons[1].name}\n          age={this.state.persons[1].age}\n        >\n          My Hobbies: Racing\n        </Person>\n        <Person\n          name={this.state.persons[2].name}\n          age={this.state.persons[2].age}\n        />\n        <Button color=\"secondary\" disabled={false}>\n          Hello World\n        </Button>\n      </div>\n    );\n  }\n  // Working with props\n  // render() {\n  //   return (\n  //     <div className=\"App\">\n  //       <h1>Hello world!</h1>\n  //       <p>This is really working!</p>\n  //       <button>Switch Name</button>\n  //       <Person name=\"Asif\" age=\"26\">\n  //         <a href=\"#\">Click Me!</a>\n  //       </Person>\n  //       <Person name=\"Max\" age=\"30\">\n  //         My Hobbies: Racing\n  //       </Person>\n  //       <Person name=\"Jonas\" age=\"31\" />\n  //     </div>\n  //   );\n\n  // How JSX actually works\n  // return React.createElement(\n  //   \"div\",\n  //   {className: App},\n  //   React.createElement(\"h1\", null, \"Hi, I'm a React App\")\n  // );\n}\n\nexport default App;\n*/\n",["13","14"],"/Users/shoaibhossain/Desktop/react-complete-giude/src/Person/Person.js",[],{"ruleId":"15","severity":1,"message":"16","line":43,"column":9,"nodeType":"17","endLine":43,"endColumn":21},{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","replacedBy":"21"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["22"],"no-negated-in-lhs",["23"],"no-global-assign","no-unsafe-negation"]